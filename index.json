[{"content":"本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\n扩展表达式求值 由于之前已经打好了大的框架，剩下的这些实现起来都很简单，对于像==，\u0026amp;\u0026amp;，!=这些二元运算符，将其添加到之前处理加减乘除的位置即可；对于指针解引用，寄存器的识别，跟之前的负号处理基本一致\n这里针对寄存器，可以将$看作是一个一元运算符，也可以像我这样直接在make_token()函数中提前处理好\nswitch (rules[i].token_type) { case TK_NUM: case TK_HEX: strncpy(tokens[nr_token].str, substr_start, substr_len); tokens[nr_token].str[substr_len] = \u0026#39;\\0\u0026#39;; break; case TK_REG: strncpy(tokens[nr_token].str, substr_start + 1, substr_len - 1); // skip the \u0026#34;$\u0026#34; tokens[nr_token].str[substr_len] = \u0026#39;\\0\u0026#39;; break; } 识别成功后直接将$符号后的寄存器名称存入token 获取寄存器的值不多说，直接返回cpu.gpr[i]即可\n实现监视点 首先补全框架提供的两个函数，其实就是基础的链表插入删除操作\nWP* new_wp() { if(free_ != NULL) { WP *wp = free_; free_ = free_-\u0026gt;next; wp-\u0026gt;next = head; head = wp; return head; } else assert(0); } 这里我将free_wp()的参数修改为了监视点的编号，方便后续调用\nvoid free_wp(int no) { WP *cur = head; WP *pre = NULL; /*find the target watch point*/ while(cur != NULL) { if(cur-\u0026gt;NO == no) { break; } pre = cur; cur = cur-\u0026gt;next; } /*move it form head to free_*/ if(cur != NULL) { if(pre != NULL) { pre-\u0026gt;next = cur-\u0026gt;next; } else head = cur-\u0026gt;next; } cur-\u0026gt;next = free_; free_ = cur; } 为了能够实现监视点的作用，如打印旧的值，我们还需要在监视点结构中加入几个成员变量expr，old 并且要接收从new_wp()函数中返回来的空闲监视点，并设置相应数据，需要新建一个函数配合\nvoid set_wp(char *expr, word_t res) { WP *wp = new_wp(); wp-\u0026gt;expr = malloc(strlen(expr) + 1); strcpy(wp-\u0026gt;expr, expr); wp-\u0026gt;old = res; printf(\u0026#34;Watch point:%d: %s\\n\u0026#34;, wp-\u0026gt;NO, wp-\u0026gt;expr); } 之后为了在trace_and_difftest()函数中扫描所有的监视点，我们需要增加一个函数difftest_wp()，并且编写相应的Kconfig\nbool difftest_wp() { bool valid = true; WP *wp = head; while(wp != NULL) { word_t new = expr(wp-\u0026gt;expr, \u0026amp;valid); if(new != wp-\u0026gt;old) { printf(\u0026#34;Watchpoint %d: %s is triggered!\\n\u0026#34;, wp-\u0026gt;NO, wp-\u0026gt;expr); printf(\u0026#34;Old value = 0x%08x\\n\u0026#34;, wp-\u0026gt;old); printf(\u0026#34;New value = 0x%08x\\n\u0026#34;, new); wp-\u0026gt;old = new; return true; } wp = wp-\u0026gt;next; } return false; } 仿照Kconfig已经含有的的配置，琢磨了一下写了一个监视点配置，运行起来也没问题，有问题后面再改\nchoice prompt \u0026#34;Watch point configuration\u0026#34; default ENABLE_WATCHPOINT config ENABLE_WATCHPOINT bool \u0026#34;enabled\u0026#34; config DISABLE_WATCHPOINT bool \u0026#34;disabled\u0026#34; endchoice 打开图形界面，能够正常显示 最后添加相应trace_and_difftest()逻辑即可\nstatic void trace_and_difftest(Decode *_this, vaddr_t dnpc) { #ifdef CONFIG_ITRACE_COND if (ITRACE_COND) { log_write(\u0026#34;%s\\n\u0026#34;, _this-\u0026gt;logbuf); } #endif if (g_print_step) { IFDEF(CONFIG_ITRACE, puts(_this-\u0026gt;logbuf)); } IFDEF(CONFIG_DIFFTEST, difftest_step(_this-\u0026gt;pc, dnpc)); #ifdef CONFIG_ENABLE_WATCHPOINT if(difftest_wp()) { nemu_state.state = NEMU_STOP; } #endif } 其他的像打印监视点不再过多赘述，最后还需要在sdb.c完成相应的指令函数\n实现断点 按照手册上操作发现表达式会报错，原因是寄存器数组并没有包含pc，发现pc包含在了cpu结构体里，直接返回cpu.pc即可\n打印行数 在nemu/script/native.mk添加即可\ncount: @find $(NEMU_HOME)/ -name \u0026#34;*.c\u0026#34; -o -name \u0026#34;*.h\u0026#34; | xargs wc -l count_no_blank: @find $(NEMU_HOME)/ -name \u0026#34;*.c\u0026#34; -o -name \u0026#34;*.h\u0026#34; | xargs grep -v \u0026#39;^\\s*$$\u0026#39; | wc -l 具体MakeFile的编写规则可以参照 https://seisman.github.io/how-to-write-makefile/index.html\nPA 1-3结束\n","permalink":"https://Yang2KF.github.io/posts/ics_pa_1-3/","summary":"\u003cp\u003e本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\u003c/p\u003e\n\u003ch2 id=\"扩展表达式求值\"\u003e扩展表达式求值\u003c/h2\u003e\n\u003cp\u003e由于之前已经打好了大的框架，剩下的这些实现起来都很简单，对于像\u003ccode\u003e==\u003c/code\u003e，\u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e，\u003ccode\u003e!=\u003c/code\u003e这些二元运算符，将其添加到之前处理加减乘除的位置即可；对于指针解引用，寄存器的识别，跟之前的负号处理基本一致\u003c/p\u003e\n\u003cp\u003e这里针对寄存器，可以将\u003ccode\u003e$\u003c/code\u003e看作是一个一元运算符，也可以像我这样直接在\u003ccode\u003emake_token()\u003c/code\u003e函数中提前处理好\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003erules\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003etoken_type\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#8fbcbb\"\u003eTK_NUM\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#8fbcbb\"\u003eTK_HEX\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003estrncpy\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003etokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_start\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_len\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003esubstr_len\u003cspan style=\"color:#eceff4\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#8fbcbb\"\u003eTK_REG\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003estrncpy\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003etokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_start \u003cspan style=\"color:#81a1c1\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_len \u003cspan style=\"color:#81a1c1\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e \u003cspan style=\"color:#616e87;font-style:italic\"\u003e// skip the \u0026#34;$\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e        tokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003esubstr_len\u003cspan style=\"color:#eceff4\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e识别成功后直接将\u003ccode\u003e$\u003c/code\u003e符号后的寄存器名称存入\u003ccode\u003etoken\u003c/code\u003e\n获取寄存器的值不多说，直接返回\u003ccode\u003ecpu.gpr[i]\u003c/code\u003e即可\u003c/p\u003e\n\u003ch2 id=\"实现监视点\"\u003e实现监视点\u003c/h2\u003e\n\u003cp\u003e首先补全框架提供的两个函数，其实就是基础的链表插入删除操作\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWP\u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003enew_wp\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003efree_ \u003cspan style=\"color:#81a1c1\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    WP \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003ewp \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e free_\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    free_ \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e free_\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    wp\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e wp\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ereturn\u003c/span\u003e head\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003eassert\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里我将\u003ccode\u003efree_wp()\u003c/code\u003e的参数修改为了监视点的编号，方便后续调用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003efree_wp\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e no\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  WP \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003ecur \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  WP \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003epre \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#616e87;font-style:italic\"\u003e/*find the target watch point*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ewhile\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ecur \u003cspan style=\"color:#81a1c1\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ecur\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003eNO \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e no\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pre \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e cur\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cur \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e cur\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#616e87;font-style:italic\"\u003e/*move it form head to free_*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ecur \u003cspan style=\"color:#81a1c1\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003epre \u003cspan style=\"color:#81a1c1\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      pre\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e cur\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eelse\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      head \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e cur\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  cur\u003cspan style=\"color:#81a1c1\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e free_\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  free_ \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e cur\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e为了能够实现监视点的作用，如打印旧的值，我们还需要在监视点结构中加入几个成员变量\u003ccode\u003eexpr\u003c/code\u003e，\u003ccode\u003eold\u003c/code\u003e\n并且要接收从\u003ccode\u003enew_wp()\u003c/code\u003e函数中返回来的空闲监视点，并设置相应数据，需要新建一个函数配合\u003c/p\u003e","title":"ICS PA 1-3 监视点"},{"content":"本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\n词法分析 首先，针对简单算术运算符增加几条正则规则\nstatic struct rule { const char *regex; int token_type; } rules[] = { /* TODO: Add more rules. * Pay attention to the precedence level of different rules. */ {\u0026#34; +\u0026#34;, TK_NOTYPE}, // spaces {\u0026#34;\\\\+\u0026#34;, \u0026#39;+\u0026#39;}, {\u0026#34;==\u0026#34;, TK_EQ}, // equal {\u0026#34;-\u0026#34;, \u0026#39;-\u0026#39;}, {\u0026#34;\\\\*\u0026#34;, \u0026#39;*\u0026#39;}, {\u0026#34;/\u0026#34;, \u0026#39;/\u0026#39;}, {\u0026#34;\\\\(\u0026#34;, \u0026#39;(\u0026#39;}, {\u0026#34;\\\\)\u0026#34;, \u0026#39;)\u0026#39;}, {\u0026#34;[0-9]+\u0026#34;, TK_NUM} // numbers }; 注意，由于+，*，(，)在正则表达式中属于元字符，有特殊含义，所以需要另一个元字符\\将其转义，但是由于在C语言中\\属于转义字符，为了在字符串中包含字面量\\，我们需要将其转义，即为\\\\\n接下来完成token的识别，为保持简洁，已省略大部分起始代码\nstatic bool make_token(char* e) { //... while (e[position] != \u0026#39;\\0\u0026#39;) { for (i = 0; i \u0026lt; NR_REGEX; i++) { if (regexec(\u0026amp;re[i], e + position, 1, \u0026amp;pmatch, 0) == 0 \u0026amp;\u0026amp; pmatch.rm_so == 0) { //... if (rules[i].token_type == TK_NOTYPE) break; tokens[nr_token].type = rules[i].token_type; switch (rules[i].token_type) { case TK_NUM: strncpy(tokens[nr_token].str, substr_start, substr_len); tokens[nr_token].str[substr_len] = \u0026#39;\\0\u0026#39;; break; } nr_token++; break; } } //... } return true; } 通过阅读手册得知，regcomp()函数将提供的正则表达式转换为能够被regexec()识别的格式，而regexec()则开始对提供的字符串e进行匹配\n主要的逻辑是：只要不为空格类型TK_NOTYPE就认为识别成功，如果是数字类型TK_NUM就将数字记录到相应token的缓存区str即可\n递归求值 手册上提到\u0026rsquo;在求值过程中发现表达式不合法的时候, 应该给上层函数返回一个表示出错的标识\u0026rsquo;，此处使用valid标识表达式是否合法\nstatic word_t eval(int p, int q, bool* valid) { *valid = true; if (p \u0026gt; q) { /* Bad expression */ *valid = false; return 0; } else if (p == q) { /* Single token. * For now this token should be a number. * Return the value of the number. */ if (tokens[p].type != TK_NUM) { *valid = false; return 0; } word_t ret = strtol(tokens[p].str, NULL, 10); return ret; } else if (check_parentheses(p, q, valid) == true) { /* The expression is surrounded by a matched pair of parentheses. * If that is the case, just throw away the parentheses. */ return eval(p + 1, q - 1, valid); } else if (*valid == true) { int op = find_major(p, q); if (op \u0026lt; 0) { *valid = false; return 0; } word_t val0 = eval(p, op - 1, valid); word_t val1 = eval(op + 1, q, valid); switch (tokens[op].type) { case \u0026#39;+\u0026#39;: return val0 + val1; case \u0026#39;-\u0026#39;: return val0 - val1; case \u0026#39;*\u0026#39;: return val0 * val1; case \u0026#39;/\u0026#39;: return val0 / val1; default: assert(-1); } } return 0; } 函数的逻辑较为简单，要注意的是我们在p==q时使用了strtol()函数将缓存在str中的数字转换为长整型，其中的参数10即代表十进制\ncheck_paratheses()的实现\nstatic bool check_parentheses(int p, int q, bool* valid) { int paren = 0;//count paranthese if (tokens[p].type == \u0026#39;(\u0026#39; \u0026amp;\u0026amp; tokens[q].type == \u0026#39;)\u0026#39;) { bool flag = true; for (int i = p + 1; i \u0026lt; q; i++) { if(tokens[i].type == \u0026#39;)\u0026#39; \u0026amp;\u0026amp; (paren == 0) \u0026amp;\u0026amp; flag) { flag = false; paren--; } if (tokens[i].type == \u0026#39;(\u0026#39;) { paren++; } else if (tokens[i].type == \u0026#39;)\u0026#39;) { if (paren == 0) { *valid = false; return false; //bad expression } paren--; } } return (paren == 0) \u0026amp;\u0026amp; flag; } else { /*There are two situations, the one is bad expression, */ for (int i = p; i \u0026lt;= q; i++) { if (tokens[i].type != \u0026#39;(\u0026#39; \u0026amp;\u0026amp; tokens[i].type != \u0026#39;)\u0026#39;) { continue; } else if (tokens[i].type == \u0026#39;(\u0026#39;) { paren++; } else if (tokens[i].type == \u0026#39;)\u0026#39;) { if (paren == 0) { *valid = false; return false; } paren--; } } /*The another one is legal expression, */ /*handed over to another function find_major() processing*/ *valid = true; return false; } } 简单讲讲上面的逻辑\n第一种情况为传入的表达式首尾已经被括号包围，这里用flag来进行判断\n①形如 (20) + (30) 表达式合法，但返回false\n②形如 (20 + 30) 表达式合法， 返回true\n③表达式非法\n第二种情况为传入的整个表达式并没有被括号包围，此时又有两种情况：\n①表达式非法，那么直接*valid = false即可\n②表达式合法，可继续求值，设置*valid = true; return false即可\n最后是找主运算符find_major()的实现\nstatic int find_major(int p, int q) { int ret = -1; int paren = 0; //count parenthese int priority = 0; for (int i = p; i \u0026lt;= q; i++) { if (tokens[i].type == TK_NUM) { continue; } else if (tokens[i].type == \u0026#39;(\u0026#39;) { paren++; } else if (tokens[i].type == \u0026#39;)\u0026#39;) { if (paren == 0) { return -1; } paren--; } else if (paren \u0026gt; 0) { continue; } else { int temp_prio; switch (tokens[i].type) { case \u0026#39;*\u0026#39;: case \u0026#39;/\u0026#39;: temp_prio = 1; break; case \u0026#39;+\u0026#39;: case \u0026#39;-\u0026#39;: temp_prio = 2; break; default: assert(0); } if (temp_prio \u0026gt;= priority) { priority = temp_prio; ret = i; } } } return ret; } 逻辑很简单，首先都是对表达式是否合法进行判断，唯一与check_paratheses()不同的一点是多了一个条件\nelse if (paren \u0026gt; 0) { continue; } 即在括号内的运算符不是主运算符\n最后判断一下优先级大小，返回优先级最小的符号位置即可\n测试代码 /*Test my funtion expr()*/ FILE* file = fopen(\u0026#34;/home/sino/PA/ics2024/nemu/tools/gen-expr/build/input\u0026#34;, \u0026#34;r\u0026#34;); if (!file) { assert(0); } char line[256]; while (fgets(line, sizeof(line), file)) { unsigned int expected_result; char expression[256]; bool valid; sscanf(line, \u0026#34;%u %[^\\n]\u0026#34;, \u0026amp;expected_result, expression); // Call expr function word_t result = expr(expression, \u0026amp;valid); printf(\u0026#34;the expr result is: %d\\n\u0026#34;, result); // Compare results if (valid == true) { if (result == expected_result) { printf(\u0026#34;Success: %u = %s\\n\u0026#34;, result, expression); } else { printf(\u0026#34;Mismatch: %u (calculated) != %u (expected) for expression: %s\\n\u0026#34;, result, expected_result, expression); } } else { printf(\u0026#34;Invalid expression: %s\\n\u0026#34;, expression); } } 按照手册上的来做就行，没什么特别的\n选做题 负号的实现 给定一个新的token类型TK_NEG来标识负号，具体思路是在处理完token之后，且在进入表达式求值之前，将满足条件的token类型改为TK_NEG\nfor (int i = 0; i \u0026lt; nr_token; i++) { if (i == 0 || (tokens[i - 1].type != \u0026#39;)\u0026#39; \u0026amp;\u0026amp; tokens[i - 1].type != TK_NUM)) { if (tokens[i].type == \u0026#39;-\u0026#39;) { tokens[i].type = TK_NEG; } } } 负号可以看作是一元运算符，与之前所编写的二元运算符不同，一元运算符只有一个操作数\n仿照二元运算操作，在找到主运算符之后，就需要将左右两个表达式与主运算符进行运算，那么一元运算符逻辑也应当如此\n所以应当在find_major()函数中做出区分，设定若找不到二元运算符则返回-1，表明此为一元运算符\ndefault: temp_prio = -1; // no binary operator 之后给出单独的处理逻辑即可\nif (op \u0026lt; 0) { // If no major operator, we need to check for unary operators if (tokens[p].type == TK_NEG) { word_t val = eval(p + 1, q, valid); return -val; } *valid = false; return 0; } PA 1-2结束\n","permalink":"https://Yang2KF.github.io/posts/ics_pa_1-2/","summary":"\u003cp\u003e本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\u003c/p\u003e\n\u003ch2 id=\"词法分析\"\u003e词法分析\u003c/h2\u003e\n\u003cp\u003e首先，针对简单算术运算符增加几条正则规则\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003estruct\u003c/span\u003e rule \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003eregex\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e token_type\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e rules\u003cspan style=\"color:#eceff4\"\u003e[]\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \t\u003cspan style=\"color:#616e87;font-style:italic\"\u003e/* TODO: Add more rules.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e   \t* Pay attention to the precedence level of different rules.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e   \t*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34; +\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e TK_NOTYPE\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e    \u003cspan style=\"color:#616e87;font-style:italic\"\u003e// spaces\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e+\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;+\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;==\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e TK_EQ\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e        \u003cspan style=\"color:#616e87;font-style:italic\"\u003e// equal\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e*\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;*\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;/\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e(\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;(\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\\\\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e)\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;)\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e},\u003c/span\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \t\u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;[0-9]+\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e TK_NUM\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#616e87;font-style:italic\"\u003e// numbers\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，由于\u003ccode\u003e+\u003c/code\u003e，\u003ccode\u003e*\u003c/code\u003e，\u003ccode\u003e(\u003c/code\u003e，\u003ccode\u003e)\u003c/code\u003e在正则表达式中属于元字符，有特殊含义，所以需要另一个元字符\u003ccode\u003e\\\u003c/code\u003e将其转义，但是由于在C语言中\u003ccode\u003e\\\u003c/code\u003e属于转义字符，为了在字符串中包含字面量\u003ccode\u003e\\\u003c/code\u003e，我们需要将其转义，即为\u003ccode\u003e\\\\\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e接下来完成\u003ccode\u003etoken\u003c/code\u003e的识别，为保持简洁，已省略大部分起始代码\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003emake_token\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003e e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#616e87;font-style:italic\"\u003e//...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ewhile\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ee\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003eposition\u003cspan style=\"color:#eceff4\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ei \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e i \u003cspan style=\"color:#81a1c1\"\u003e\u0026lt;\u003c/span\u003e NR_REGEX\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e i\u003cspan style=\"color:#81a1c1\"\u003e++\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#88c0d0\"\u003eregexec\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003e\u0026amp;\u003c/span\u003ere\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e],\u003c/span\u003e e \u003cspan style=\"color:#81a1c1\"\u003e+\u003c/span\u003e position\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e\u0026amp;\u003c/span\u003epmatch\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pmatch\u003cspan style=\"color:#eceff4\"\u003e.\u003c/span\u003erm_so \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#616e87;font-style:italic\"\u003e//...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003erules\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003etoken_type \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e TK_NOTYPE\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                tokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003etype \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e rules\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003etoken_type\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eswitch\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003erules\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003etoken_type\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#8fbcbb\"\u003eTK_NUM\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#88c0d0\"\u003estrncpy\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003etokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_start\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e substr_len\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    tokens\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003enr_token\u003cspan style=\"color:#eceff4\"\u003e].\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003esubstr_len\u003cspan style=\"color:#eceff4\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                nr_token\u003cspan style=\"color:#81a1c1\"\u003e++\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ebreak\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#616e87;font-style:italic\"\u003e//...\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#616e87;font-style:italic\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003etrue\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e通过阅读手册得知，\u003ccode\u003eregcomp()\u003c/code\u003e函数将提供的正则表达式转换为能够被\u003ccode\u003eregexec()\u003c/code\u003e识别的格式，而\u003ccode\u003eregexec()\u003c/code\u003e则开始对提供的字符串\u003ccode\u003ee\u003c/code\u003e进行匹配\u003c/p\u003e","title":"ICS PA 1-2 表达式求值"},{"content":"本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\n单步执行 根据文档中提到的字符串处理函数即可，此处使用strtok(), sscanf() 进行处理\nstatic int cmd_si(char *args) { /*extract the first argument*/ char *arg = strtok(NULL, \u0026#34; \u0026#34;); /*the default is 1*/ if (arg == NULL) { cpu_exec(1); } else { int steps; /*convert to int*/ sscanf(arg, \u0026#34;%d\u0026#34;, \u0026amp;steps); cpu_exec(steps); } return 0; } strtok()的第一个参数为所处理的字符串str，第二个参数为处理的界限delimiting byte\n在sdb_mainloop()函数中，进行了第一次调用，指明了处理的字符串str\nchar *cmd = strtok(str, \u0026#34; \u0026#34;); 在后续的调用中，因为所处理的都是同一个字符串，第一个参数str则必须为NULL\nsscanf()则将char *类型的参数转换为int，便于函数cpu_exec()执行\n打印寄存器 仿照gdb格式同时打印十六进制和十进制的地址值，按照手册提示调用isa_reg_display()即可\nstatic int cmd_info(char *args) { char *arg = strtok(NULL, \u0026#34; \u0026#34;); if (arg == NULL) { printf(\u0026#34;No args.\\n\u0026#34;); } else if (strcmp(arg, \u0026#34;r\u0026#34;) == 0) { isa_reg_display(); } return 0; } 其中isa_reg_display()实现为\nvoid isa_reg_display() { int length = sizeof(regs) / sizeof(regs[0]); for (int i = 0; i \u0026lt; length; i++) { printf(\u0026#34;%-6s 0x%-12x %-10d\\n\u0026#34;, regs[i], gpr(i), gpr(i)); } } 变量cpu的类型为CPU_state，在 /nemu/include/memory/isa.h可找到\n扫描内存 在手册中RTFSC篇章已经提到，访问内存的实现在nemu/src/memory中\n同上，调用一下已有的实现即可，注意导入相应的头文件\nstatic int cmd_x(char* args) { /*extract the first and second argument*/ char* arg = strtok(NULL, \u0026#34; \u0026#34;); char* EXPR = strtok(NULL, \u0026#34; \u0026#34;); int i; if (arg == NULL || EXPR == NULL) { printf(\u0026#34;No args.\\n\u0026#34;); } else { int n; bool valid = true; vaddr_t position = expr(EXPR, \u0026amp;valid); if (valid == false) { printf(\u0026#34;Your expression is illegal.\\n\u0026#34;); return 0; } /*convert arguments*/ sscanf(arg, \u0026#34;%d\u0026#34;, \u0026amp;n); for (i = 0; i \u0026lt; n; i++) { printf(\u0026#34;%#x:\\t%#x\\n\u0026#34;, position, vaddr_read(position, 4)); position += 4; } } return 0; } 题目要求以十六进制形式输出连续的N个4字节，所以paddr_read()参数填4即可\n最后别忘记由于sdb是通过结构体数组cmd_table调用相应指令handler实现的，所以记得补全cmd_table并给出相应指令的help描述\nPA 1-1结束\n","permalink":"https://Yang2KF.github.io/posts/ics_pa_1-1/","summary":"\u003cp\u003e本人仅为兴趣使然记录过程，请尊重手册上的学术诚信条目。\u003c/p\u003e\n\u003ch2 id=\"单步执行\"\u003e单步执行\u003c/h2\u003e\n\u003cp\u003e根据文档中提到的字符串处理函数即可，此处使用\u003ccode\u003estrtok()\u003c/code\u003e, \u003ccode\u003esscanf()\u003c/code\u003e 进行处理\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003ecmd_si\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003eargs\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#616e87;font-style:italic\"\u003e/*extract the first argument*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003earg \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003estrtok\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#616e87;font-style:italic\"\u003e/*the default is 1*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003earg \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003ecpu_exec\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#b48ead\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e steps\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#616e87;font-style:italic\"\u003e/*convert to int*/\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003esscanf\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003earg\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;%d\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e\u0026amp;\u003c/span\u003esteps\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003ecpu_exec\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003esteps\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003estrtok()\u003c/code\u003e的第一个参数为所处理的字符串\u003ccode\u003estr\u003c/code\u003e，第二个参数为处理的界限\u003ccode\u003edelimiting byte\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e在\u003ccode\u003esdb_mainloop()\u003c/code\u003e函数中，进行了第一次调用，指明了处理的字符串\u003ccode\u003estr\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003ecmd \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003estrtok\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003estr\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在后续的调用中，因为所处理的都是同一个字符串，第一个参数\u003ccode\u003estr\u003c/code\u003e则必须为\u003cstrong\u003eNULL\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003esscanf()\u003c/code\u003e则将\u003ccode\u003echar *\u003c/code\u003e类型的参数转换为\u003ccode\u003eint\u003c/code\u003e，便于函数\u003ccode\u003ecpu_exec()\u003c/code\u003e执行\u003c/p\u003e\n\u003ch2 id=\"打印寄存器\"\u003e打印寄存器\u003c/h2\u003e\n\u003cp\u003e仿照gdb格式同时打印十六进制和十进制的地址值，按照手册提示调用\u003ccode\u003eisa_reg_display()\u003c/code\u003e即可\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003ecmd_info\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003eargs\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1\"\u003echar\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e*\u003c/span\u003earg \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003estrtok\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003earg \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003eNULL\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003eprintf\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;No args.\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#88c0d0\"\u003estrcmp\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003earg\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;r\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003eisa_reg_display\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e其中\u003ccode\u003eisa_reg_display()\u003c/code\u003e实现为\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003eisa_reg_display\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e length \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003esizeof\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003eregs\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#81a1c1\"\u003e/\u003c/span\u003e \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003esizeof\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003eregs\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003e\u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e]);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#81a1c1;font-weight:bold\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#81a1c1\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#b48ead\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e i \u003cspan style=\"color:#81a1c1\"\u003e\u0026lt;\u003c/span\u003e length\u003cspan style=\"color:#eceff4\"\u003e;\u003c/span\u003e i\u003cspan style=\"color:#81a1c1\"\u003e++\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#eceff4\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#88c0d0\"\u003eprintf\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;%-6s 0x%-12x %-10d\u003c/span\u003e\u003cspan style=\"color:#ebcb8b\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#a3be8c\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e,\u003c/span\u003e regs\u003cspan style=\"color:#eceff4\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e],\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003egpr\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e),\u003c/span\u003e \u003cspan style=\"color:#88c0d0\"\u003egpr\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e(\u003c/span\u003ei\u003cspan style=\"color:#eceff4\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#eceff4\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e变量\u003ccode\u003ecpu\u003c/code\u003e的类型为\u003ccode\u003eCPU_state\u003c/code\u003e，在 \u003ccode\u003e/nemu/include/memory/isa.h\u003c/code\u003e可找到\u003c/p\u003e\n\u003ch2 id=\"扫描内存\"\u003e扫描内存\u003c/h2\u003e\n\u003cp\u003e在手册中\u003cstrong\u003eRTFSC\u003c/strong\u003e篇章已经提到，访问内存的实现在\u003ccode\u003enemu/src/memory\u003c/code\u003e中\u003c/p\u003e","title":"ICS PA 1-1 基础设施"},{"content":"本文默认已有一定的git与命令行基础\n配置环境: Ubuntu 22.04.5 LTS\n安装Hugo 使用Snap包管理器（安装方法有多种，可自行选择，此处选择较为简便的方式）\nsudo snap install hugo 查看hugo版本\nhugo version 如果显示找不到该命令，则在~/.bashrc设置一下环境变量即可\nexport PATH=$PATH:/snap/bin 创建站点 hugo new site Start 执行命令之后，进入你所创建的站点目录（下文统称此目录为根目录），会看见像这样的文件结构\n├── archetypes │ └── default.md #生成博文的模板 ├── assets #存放 css、js 文件 ├── content #存放markdown博文 ├── data #存放 Hugo 处理的数据 ├── hugo.toml #Hugo 配置文件 ├── layouts #存放html文件 ├── static #静态资源文件 └── themes #存放不同主题 比较主要的文件有\nassets: 可自定义css，js layouts: 可自定义html生成模板 选择合适的主题 为避免本地仓库与远程仓库分支名称不一致的冲突，建议将git主分支名称设置为main，与GitHub默认主分支名称保持一致\n首先将根目录初始化为本地git仓库\ngit init 访问官方主题网站：https://themes.gohugo.io/\n选择你所喜欢的主题，不同主题安装方式可能略有不同，请参照主题主页的文档，此处以PaperMod为例\n在根目录下执行该命令，即将该仓库作为本地仓库的子模块\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 然后在hugo.yml里添加主题即可（默认配置文件格式为toml，但yml更为直观）\ntheme: \u0026#39;PaperMod\u0026#39; 最后建议将此本地仓库push至github进行版本管理，即作为我们博客的源代码\n创建博文 顺利完成上述操作后，可以通过hugo new命令创建新的博文\nhugo new posts/Test.md 这个命令会在content目录下生成posts文件夹，并在posts文件夹下生成Test.md文件\n+++ date = \u0026#39;2024-10-30T19:25:01+08:00\u0026#39; draft = true title = \u0026#39;Test\u0026#39; +++ 该文件自动生成的内容为博文的front matter，可以通过修改archetypes中的default.md自行配置front matter\n该文件中的draft为草稿，只有设置为false时才会将博文正式发布\n本地调试博文 hugo server 使用此命令即可启动hugo服务，然后访问http://localhost:1313/即可看见所编写的博文\nhugo server -D 还可以通过此命令访问本地尚处于草稿状态的博文\n配置Github Pages 在github创建一个新仓库\n仓库名称必须为 用户名.github.io，仓库访问权限必须为public\n之后在你的根目录下执行该命令\nhugo 成功后会构建一个public目录，该目录即为根据hugo框架构建的静态网页文件，需要将此文件部署到github上\n进入该文件夹\ncd public 初始化为本地git仓库\ngit init 将你所创建的仓库添加为远程仓库\ngit remote add origin git@github.com:Yang2KF/Yang2KF.github.io.git 将内容添加到暂存区并提交\ngit add . git commit -m \u0026#34;first commit\u0026#34; 推送到远程仓库\ngit push -u origin main 此仓库即可作为存放所生成的静态网页的仓库，与博客源代码仓库区分开来\n最后再修改hugo.yml，将url替换成你的仓库名称即可对该链接进行访问\nbaseURL: \u0026#39;https://Yang2KF.github.io\u0026#39; 注意本地调试时你的url会被替换为http://localhost:1313/，所以你在上传到github仓库前必须重新用hugo命令构建，这样才会使你的url替换为你所设置的baseURL\n","permalink":"https://Yang2KF.github.io/posts/hugo-githubpages/","summary":"\u003cp\u003e本文默认已有一定的git与命令行基础\u003cbr\u003e\n配置环境: Ubuntu 22.04.5 LTS\u003c/p\u003e\n\u003ch2 id=\"安装hugo\"\u003e安装Hugo\u003c/h2\u003e\n\u003cp\u003e使用Snap包管理器（安装方法有多种，可自行选择，此处选择较为简便的方式）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esudo snap install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e查看hugo版本\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"images/1.png\" alt=\"image-1\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e如果显示找不到该命令，则在\u003ccode\u003e~/.bashrc\u003c/code\u003e设置一下环境变量即可\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1\"\u003eexport\u003c/span\u003e PATH\u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e$PATH:/snap/bin\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"创建站点\"\u003e创建站点\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site Start\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e执行命令之后，进入你所创建的站点目录（下文统称此目录为\u003cstrong\u003e根目录\u003c/strong\u003e），会看见像这样的文件结构\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── archetypes   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e│   └── default.md      \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#生成博文的模板  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── assets              \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#存放 css、js 文件  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── content             \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#存放markdown博文  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── data                \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#存放 Hugo 处理的数据  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── hugo.toml           \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#Hugo 配置文件  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── layouts             \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#存放html文件  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e├── static              \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#静态资源文件  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e└── themes              \u003cspan style=\"color:#616e87;font-style:italic\"\u003e#存放不同主题  \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e比较主要的文件有\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e assets: 可自定义css，js \u003c/li\u003e\n\u003cli\u003e layouts: 可自定义html生成模板 \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"选择合适的主题\"\u003e选择合适的主题\u003c/h2\u003e\n\u003cp\u003e为避免本地仓库与远程仓库分支名称不一致的冲突，建议将git主分支名称设置为\u003ccode\u003emain\u003c/code\u003e，与GitHub默认主分支名称保持一致\u003c/p\u003e\n\u003cp\u003e首先将根目录初始化为本地git仓库\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e访问官方主题网站：\u003ca href=\"https://themes.gohugo.io/\"\u003ehttps://themes.gohugo.io/\u003c/a\u003e\u003cbr\u003e\n选择你所喜欢的主题，不同主题安装方式可能略有不同，请参照主题主页的文档，此处以\u003cstrong\u003ePaperMod\u003c/strong\u003e为例\u003c/p\u003e\n\u003cp\u003e在根目录下执行该命令，即将该仓库作为本地仓库的子模块\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egit submodule add --depth\u003cspan style=\"color:#81a1c1\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#b48ead\"\u003e1\u003c/span\u003e https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后在\u003ccode\u003ehugo.yml\u003c/code\u003e里添加主题即可（默认配置文件格式为toml，但yml更为直观）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#d8dee9;background-color:#2e3440;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#81a1c1\"\u003etheme\u003c/span\u003e\u003cspan style=\"color:#eceff4\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a3be8c\"\u003e\u0026#39;PaperMod\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e最后建议将此本地仓库push至github进行版本管理，即作为我们博客的源代码\u003c/p\u003e","title":"Hugo + Github pages 搭建博客"}]